function gify() {
	filepath="$1"
	filenamePath="${filepath%.*}"
	gifpath=${3:-"$filenamePath".gif}
	dimensions=${2:-"600x400"}
	ffmpeg -i "$filepath" -s "$dimensions" -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$gifpath"
}

# Simple calculator
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Create file in a nested directory
function touchp() {
  # `dirname "$@"` = path, `basename "$@"` = filename
  mkdir -p `dirname "$@"` && touch "$@";
}

# Create a file in a nested directory and cd into it
function touchdp() {
  mkdir -p `dirname "$@"` && touch "$@" && cd `dirname "$@"`;
}

function touche() {
	local usage="touche filepath [executable] -- Create an executable file at filepath

	Default is to create a \"#!/usr/bin/env bash\" executable when only one
	argument (filepath) is given. The second argument (executable) is optional
	and will change the the \"bash\" value in \"#!/usr/bin/env bash\".

	Options
		filepath	Executable file created at filepath (mkdir -p)
		[executable]	Specify a different executable (default is \"bash\")";

	if [[ "$#" -eq 0 ]] || [[ "$@" == "-h" ]] || [[ "$@" == "--help" ]]; then
		echo "$usage";
		return;
	fi;
	if [ "$#" -gt 1 ]; then
		touchp "$1" && chmod +x "$1" && echo "#!/usr/bin/env ${2}" > "$1";
	else
		touchp "$@" && chmod +x "$@" && echo "#!/usr/bin/env bash" > "$@";
	fi;
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

function untargz() {
  local tarball="${@%/}";
  tar -zxvf "${tarball}" || return 1;
  echo "${tarball%.tar.gz} created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	# python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
	python3 -m http.server
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


# notes
# args:
# * -a [title]
# * -e
# * -p
# if no argument is provided a list of the notes from $NOTES_DIR will be displayed to view.
# you need to export $NOTES_DIR in you environment to use this
function notes() {

	usage="notes [-a <filename>, -e, -p] -- create, edit, publish or view a note

	default is to read notes, don't pass any args

	where
		-h		Show this help text
		-a <filename>	Add a new note called filename.md
		-e		Edit a note (you will be prompted with the note list)
		-p		Publish notes to github"


	# reset variables
	OPTIND=1;
	unset NOTES_LIST;
	unset NOTES_OPT;
	unset NOTETITLE;
	unset CONFIRM_PUBLISH;
	unset COMMIT_MSG;

	if [ -z ${NOTES_EDITOR+x} ]; then
		# Use default editor if none specified
		NOTES_EDITOR=$EDITOR;
	fi;

	while getopts ":a:eph" opt; do
	  case $opt in
			h)
				echo "$usage"
				return
				;;
			a)
				NOTES_OPT="a";
				NOTETITLE=$OPTARG
				echo "Creating new note called $NOTETITLE"
				;;
			e)
				NOTES_OPT="e";
				echo "Edit a note" >&2
				;;
			p)
				NOTES_OPT="p";
				echo "confirm publish all notes [y/N]: ";
				read CONFIRM_PUBLISH
				;;
			\?)
				printf "Invalid option -%s\n" "$OPTARG" >&2
				echo "$usage" >&2
				return
				;;
			:)
				echo "Need a valid note name" >&2
				echo "$usage" >&2
				return
				;;
			esac
	done

  # remove all options parsed by getopts so next input is $1
	shift "$((OPTIND-1))";

	# check if publish option was given
	if [ "$NOTES_OPT" == "p" ]; then
		echo; echo
		if [ "$CONFIRM_PUBLISH" == "y" ]; then
			echo "Publishing Notes..."
			(
				cd $NOTES_DIR
				COMMIT_MSG=$(git status -s)
				git add .
				git commit -F- <<EOF
Update notes

$COMMIT_MSG
EOF
				git push origin master
			)
		else
			echo "Not Publishing, rerun and confirm with 'y' if you want to publish";
		fi;
		return;
	fi;

	QUIT="!Quit"
	touch $NOTES_DIR/$QUIT
	NOTE_LIST="$(ls $NOTES_DIR/)"

	if [ "$NOTES_OPT" == "a" ]; then
		$NOTES_EDITOR "$NOTES_DIR/$NOTETITLE.md";
	else
		NOTEMESSAGE="Type the number of the note. Type 1 to quit"
		echo $NOTEMESSAGE
		select FILENAME in $NOTE_LIST;
		do
			case $FILENAME in
				"$QUIT")
					break
					;;
				*)
					if [ "$NOTES_OPT" == "e" ]; then
						$NOTES_EDITOR "$NOTES_DIR/$FILENAME"
						break
					else
						cat "$NOTES_DIR/$FILENAME"
					fi;
					echo; echo
					break
					;;
			esac
		done
	fi;
	rm $NOTES_DIR/$QUIT
}

# goshawk
function aws-goshawk-login() {
	eval "$(pyenv init -)"
	source ~/env/bin/activate
	export AWS_PROFILE="${1:-"wfarleyCli"}"
	cp ~/.npmrc ~/.npmrc_public # backup previous .npmrc config because goshawk don't give a f*** about that
	aws goshawk get-login --package-manager npm --domain-name amazon --repository "${2:-"shared"}" --execute
	npm config get registry
}
function aws-goshawk-logout() {
	cp ~/.npmrc_public ~/.npmrc
	npm config get registry
}

function meme-list() {
	curl https://memegen.link/api/templates/ | jq '.'
}

function lsdo() {
	local lsdir="$1"
	local lscmd="$2"
	local lscmd1="$3"
	local filelist="$(ls $lsdir)"
	if [ "$#" -gt 2 ]; then
		for file in $filelist; do "$lscmd" "$file" "${file}${lscmd1}"; done
	else
		for file in $filelist; do "$lscmd" "$file"; done
	fi;
}
